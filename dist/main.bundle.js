/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./scripts/main.js":
/*!*************************!*\
  !*** ./scripts/main.js ***!
  \*************************/
/***/ (() => {

eval("document.addEventListener('DOMContentLoaded', async function () {\r\n  const supabaseUrl = \"https://cbpmcmajjwlejlmqpnra.supabase.co\";\r\n  const supabaseKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNicG1jbWFqandsZWpsbXFwbnJhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3Mzg4NDU3OTYsImV4cCI6MjA1NDQyMTc5Nn0.RhKWuTiS6RMB7vaMqBN6iP8HXTcWKmAlTG27cqcEs8U\";\r\n  const supabase = window.supabase.createClient(supabaseUrl, supabaseKey);\r\n\r\n  const searchInput = document.getElementById('search');\r\n  const categorySelect = document.getElementById('category');\r\n  const priceRangeSelect = document.getElementById('price-range');\r\n  const sortSelect = document.getElementById('sort');\r\n  const productsContainer = document.getElementById('products');\r\n  const addProductButton = document.getElementById('addProductButton');\r\n  const addProductModal = document.getElementById('addProductModal');\r\n  const addProductForm = document.getElementById('addProductForm');\r\n  const editProductModal = document.getElementById('editProductModal');\r\n  const editProductForm = document.getElementById('editProductForm');\r\n  const settingsButton = document.getElementById('settingsButton');\r\n  const settingsModal = document.getElementById('settingsModal');\r\n  const addCategoryForm = document.getElementById('addCategoryForm');\r\n  const categoriesList = document.getElementById('categoriesList');\r\n  const closeModalButtons = document.querySelectorAll('.close');\r\n  const loginButton = document.getElementById('loginButton');\r\n  const logoutButton = document.getElementById('logoutButton');\r\n\r\n  let user = null;\r\n\r\n  async function checkAuth() {\r\n    const { data: { user: currentUser } } = await supabase.auth.getUser();\r\n    user = currentUser;\r\n    updateUI();\r\n  }\r\n\r\n  function updateUI() {\r\n    if (user) {\r\n      loginButton.style.display = 'none';\r\n      settingsButton.style.display = 'block';\r\n      addProductButton.style.display = 'block';\r\n      logoutButton.style.display = 'block';\r\n      document.querySelectorAll('.edit-button, .delete-button').forEach(button => {\r\n        button.style.display = 'block';\r\n      });\r\n    } else {\r\n      loginButton.style.display = 'block';\r\n      settingsButton.style.display = 'none';\r\n      addProductButton.style.display = 'none';\r\n      logoutButton.style.display = 'none';\r\n      document.querySelectorAll('.edit-button, .delete-button').forEach(button => {\r\n        button.style.display = 'none';\r\n      });\r\n    }\r\n  }\r\n\r\n  loginButton.addEventListener('click', async () => {\r\n    const { error } = await supabase.auth.signInWithPassword({\r\n      email: prompt('Email:'),\r\n      password: prompt('Password:')\r\n    });\r\n\r\n    if (error) {\r\n      alert('Login failed: ' + error.message);\r\n    } else {\r\n      await checkAuth();\r\n    }\r\n  });\r\n\r\n  logoutButton.addEventListener('click', async () => {\r\n    const { error } = await supabase.auth.signOut();\r\n\r\n    if (error) {\r\n      alert('Logout failed: ' + error.message);\r\n    } else {\r\n      user = null;\r\n      updateUI();\r\n      settingsModal.style.display = 'none';\r\n    }\r\n  });\r\n\r\n  settingsButton.addEventListener('click', function () {\r\n    settingsModal.style.display = 'block';\r\n    fetchCategories();\r\n  });\r\n\r\n  async function fetchCategories() {\r\n    const { data: categories, error: categoriesError } = await supabase\r\n      .from('categories')\r\n      .select('*');\r\n\r\n    const { data: products, error: productsError } = await supabase\r\n      .from('products')\r\n      .select('category');\r\n\r\n    if (categoriesError || productsError) {\r\n      console.error('Error fetching categories or products:', categoriesError || productsError);\r\n      return;\r\n    }\r\n\r\n    const productCategories = [...new Set(products.map(product => product.category))];\r\n    const allCategories = [...new Set([...categories.map(category => category.name), ...productCategories])];\r\n\r\n    renderCategories(categories);\r\n    populateCategoryDropdowns(allCategories);\r\n  }\r\n\r\n  function renderCategories(categories) {\r\n    categoriesList.innerHTML = '';\r\n    categories.forEach(function (category) {\r\n      const categoryElement = document.createElement('div');\r\n      categoryElement.className = 'category-item';\r\n      categoryElement.setAttribute('data-id', category.id);\r\n\r\n      categoryElement.innerHTML = `\r\n        <span>${category.name}</span>\r\n        <button class=\"delete-category-button\">Obriši</button>\r\n      `;\r\n\r\n      categoryElement.querySelector('.delete-category-button').addEventListener('click', async function () {\r\n        await deleteCategory(category.id);\r\n      });\r\n\r\n      categoriesList.appendChild(categoryElement);\r\n    });\r\n  }\r\n\r\n  function populateCategoryDropdowns(categories) {\r\n    const categoryOptions = categories.map(category => `<option value=\"${category}\">${category}</option>`).join('');\r\n    categorySelect.innerHTML = `<option value=\"all\">Sve kategorije</option>${categoryOptions}`;\r\n    document.getElementById('productCategory').innerHTML = categoryOptions;\r\n    document.getElementById('editProductCategory').innerHTML = categoryOptions;\r\n  }\r\n\r\n  async function deleteCategory(categoryId) {\r\n    const { error } = await supabase\r\n      .from('categories')\r\n      .delete()\r\n      .eq('id', categoryId);\r\n\r\n    if (error) {\r\n      console.error('Error deleting category:', error);\r\n      return;\r\n    }\r\n\r\n    fetchCategories();\r\n  }\r\n\r\n  addCategoryForm.addEventListener('submit', async function (event) {\r\n    event.preventDefault();\r\n\r\n    const categoryName = document.getElementById('categoryName').value;\r\n\r\n    const { data, error } = await supabase\r\n      .from('categories')\r\n      .insert([{ name: categoryName }]);\r\n\r\n    if (error) {\r\n      console.error('Error adding category:', error);\r\n      return;\r\n    }\r\n\r\n    document.getElementById('categoryName').value = '';\r\n    fetchCategories();\r\n  });\r\n\r\n  async function fetchProducts() {\r\n    const { data: products, error } = await supabase\r\n      .from('products')\r\n      .select('*');\r\n\r\n    if (error) {\r\n      console.error('Error fetching products:', error);\r\n      return;\r\n    }\r\n\r\n    renderProducts(products);\r\n  }\r\n\r\n  function renderProducts(products) {\r\n    productsContainer.innerHTML = '';\r\n    products.forEach(function (product) {\r\n      const productElement = document.createElement('div');\r\n      productElement.className = 'product';\r\n      productElement.setAttribute('data-id', product.id);\r\n      productElement.setAttribute('data-category', product.category);\r\n      productElement.setAttribute('data-price', product.price);\r\n\r\n      productElement.innerHTML = `\r\n        <img src=\"${product.image_url}\" alt=\"${product.title}\">\r\n        <div class=\"product-details\">\r\n          <div class=\"product-title\">${product.title}</div>\r\n          <div class=\"product-price\">${product.price} RSD</div>\r\n          <div class=\"product-description\">${product.description}</div>\r\n        </div>\r\n        <div class=\"product-buttons\">\r\n          <button class=\"edit-button\" style=\"display: none;\">Izmeni</button>\r\n          <button class=\"delete-button\" style=\"display: none;\">Obriši</button>\r\n        </div>\r\n      `;\r\n\r\n      productElement.querySelector('.edit-button').addEventListener('click', function (event) {\r\n        event.stopPropagation();\r\n        openEditModal(product);\r\n      });\r\n\r\n      productElement.querySelector('.delete-button').addEventListener('click', async function (event) {\r\n        event.stopPropagation();\r\n        await deleteProduct(product.id, product.image_url);\r\n      });\r\n\r\n      productElement.addEventListener('click', function () {\r\n        showModal(product);\r\n      });\r\n\r\n      productsContainer.appendChild(productElement);\r\n    });\r\n\r\n    updateUI();\r\n  }\r\n\r\n  function showModal(product) {\r\n    const modal = document.getElementById('productModal');\r\n    const modalContent = document.getElementById('modalProductDetails');\r\n\r\n    modalContent.innerHTML = `\r\n      <h2>${product.title}</h2>\r\n      <img src=\"${product.image_url}\" alt=\"${product.title}\" style=\"max-width: 100%; height: auto;\">\r\n      <p><strong>Price:</strong> ${product.price} RSD</p>\r\n      <p>${product.description}</p>\r\n    `;\r\n\r\n    modal.style.display = 'block';\r\n\r\n    const editButton = modal.querySelector('.edit-button');\r\n    const deleteButton = modal.querySelector('.delete-button');\r\n\r\n    editButton.onclick = function () {\r\n      openEditModal(product);\r\n      modal.style.display = 'none';\r\n    };\r\n\r\n    deleteButton.onclick = async function () {\r\n      await deleteProduct(product.id, product.image_url);\r\n      modal.style.display = 'none';\r\n    };\r\n\r\n    updateUI();\r\n  }\r\n\r\n  function filterProducts() {\r\n    const searchText = searchInput.value.toLowerCase();\r\n    const category = categorySelect.value;\r\n    const priceRange = priceRangeSelect.value;\r\n    const products = document.querySelectorAll('.product');\r\n\r\n    products.forEach(function (product) {\r\n      const title = product.querySelector('.product-title').textContent.toLowerCase();\r\n      const description = product.querySelector('.product-description').textContent.toLowerCase();\r\n      const productCategory = product.getAttribute('data-category');\r\n      const productPrice = parseInt(product.getAttribute('data-price'));\r\n\r\n      const matchesSearch = title.includes(searchText) || description.includes(searchText);\r\n      const matchesCategory = category === 'all' || productCategory === category;\r\n      const matchesPriceRange = priceRange === 'all' || checkPriceRange(productPrice, priceRange);\r\n\r\n      if (matchesSearch && matchesCategory && matchesPriceRange) {\r\n        product.style.display = 'flex';\r\n      } else {\r\n        product.style.display = 'none';\r\n      }\r\n    });\r\n  }\r\n\r\n  function checkPriceRange(price, range) {\r\n    switch (range) {\r\n      case '0-1000':\r\n        return price >= 0 && price <= 1000;\r\n      case '1000-2000':\r\n        return price > 1000 && price <= 2000;\r\n      case '2000-3000':\r\n        return price > 2000 && price <= 3000;\r\n      case '3000+':\r\n        return price > 3000;\r\n      default:\r\n        return true;\r\n    }\r\n  }\r\n\r\n  async function deleteProduct(productId, imageUrl) {\r\n    const imagePath = imageUrl.split('/').pop();\r\n\r\n    const { error: imageError } = await supabase.storage\r\n      .from('product-images')\r\n      .remove([`public/${imagePath}`]);\r\n\r\n    if (imageError) {\r\n      console.error('Error deleting image:', imageError);\r\n      return;\r\n    }\r\n\r\n    const { error } = await supabase\r\n      .from('products')\r\n      .delete()\r\n      .eq('id', productId);\r\n\r\n    if (error) {\r\n      console.error('Error deleting product:', error);\r\n      return;\r\n    }\r\n\r\n    await fetchProducts();\r\n  }\r\n\r\n  function openEditModal(product) {\r\n    document.getElementById('editProductId').value = product.id;\r\n    document.getElementById('editProductTitle').value = product.title;\r\n    document.getElementById('editProductDescription').value = product.description;\r\n    document.getElementById('editProductPrice').value = product.price;\r\n    document.getElementById('editProductCategory').value = product.category;\r\n    editProductModal.style.display = 'block';\r\n  }\r\n\r\n  searchInput.addEventListener('keyup', filterProducts);\r\n  categorySelect.addEventListener('change', filterProducts);\r\n  priceRangeSelect.addEventListener('change', filterProducts);\r\n\r\n  sortSelect.addEventListener('change', function (event) {\r\n    const sortValue = event.target.value;\r\n    const productsArray = Array.from(document.querySelectorAll('.product'));\r\n\r\n    productsArray.sort(function (a, b) {\r\n      const priceA = parseInt(a.getAttribute('data-price'));\r\n      const priceB = parseInt(b.getAttribute('data-price'));\r\n\r\n      if (sortValue === 'price-asc') {\r\n        return priceA - priceB;\r\n      } else if (sortValue === 'price-desc') {\r\n        return priceB - priceA;\r\n      } else {\r\n        return 0;\r\n      }\r\n    });\r\n\r\n    productsContainer.innerHTML = '';\r\n    productsArray.forEach(function (product) {\r\n      productsContainer.appendChild(product);\r\n    });\r\n  });\r\n\r\n  addProductButton.addEventListener('click', function () {\r\n    addProductModal.style.display = 'block';\r\n  });\r\n\r\n  closeModalButtons.forEach(function (button) {\r\n    button.onclick = function () {\r\n      addProductModal.style.display = 'none';\r\n      editProductModal.style.display = 'none';\r\n      document.getElementById('productModal').style.display = 'none';\r\n      settingsModal.style.display = 'none';\r\n    };\r\n  });\r\n\r\n  window.onclick = function (event) {\r\n    if (event.target == addProductModal) {\r\n      addProductModal.style.display = 'none';\r\n    }\r\n    if (event.target == editProductModal) {\r\n      editProductModal.style.display = 'none';\r\n    }\r\n    if (event.target == document.getElementById('productModal')) {\r\n      document.getElementById('productModal').style.display = 'none';\r\n    }\r\n    if (event.target == settingsModal) {\r\n      settingsModal.style.display = 'none';\r\n    }\r\n  };\r\n\r\n  addProductForm.addEventListener('submit', async function (event) {\r\n    event.preventDefault();\r\n\r\n    const title = document.getElementById('productTitle').value;\r\n    const description = document.getElementById('productDescription').value;\r\n    const price = document.getElementById('productPrice').value;\r\n    const category = document.getElementById('productCategory').value;\r\n    const imageFile = document.getElementById('productImage').files[0];\r\n\r\n    if (!imageFile) {\r\n      alert('Please select an image file.');\r\n      return;\r\n    }\r\n\r\n    const { data: imageData, error: imageError } = await supabase.storage\r\n      .from('product-images')\r\n      .upload(`public/${imageFile.name}`, imageFile);\r\n\r\n    if (imageError) {\r\n      console.error('Error uploading image:', imageError);\r\n      return;\r\n    }\r\n\r\n    const imageUrl = `${supabaseUrl}/storage/v1/object/public/product-images/${imageData.path}`;\r\n\r\n    const { data, error } = await supabase\r\n      .from('products')\r\n      .insert([{ title, description, price, category, image_url: imageUrl }]);\r\n\r\n    if (error) {\r\n      console.error('Error adding product:', error);\r\n      return;\r\n    }\r\n\r\n    addProductModal.style.display = 'none';\r\n    await fetchProducts();\r\n  });\r\n\r\n  editProductForm.addEventListener('submit', async function (event) {\r\n    event.preventDefault();\r\n\r\n    const id = document.getElementById('editProductId').value;\r\n    const title = document.getElementById('editProductTitle').value;\r\n    const description = document.getElementById('editProductDescription').value;\r\n    const price = document.getElementById('editProductPrice').value;\r\n    const category = document.getElementById('editProductCategory').value;\r\n    const imageFile = document.getElementById('editProductImage').files[0];\r\n\r\n    let imageUrl = null;\r\n    if (imageFile) {\r\n      const { data: imageData, error: imageError } = await supabase.storage\r\n        .from('product-images')\r\n        .upload(`public/${imageFile.name}`, imageFile);\r\n\r\n      if (imageError) {\r\n        console.error('Error uploading image:', imageError);\r\n        return;\r\n      }\r\n\r\n      imageUrl = `${supabaseUrl}/storage/v1/object/public/product-images/${imageData.path}`;\r\n    }\r\n\r\n    const updateData = { title, description, price, category };\r\n    if (imageUrl) {\r\n      updateData.image_url = imageUrl;\r\n    }\r\n\r\n    const { data, error } = await supabase\r\n      .from('products')\r\n      .update(updateData)\r\n      .eq('id', id);\r\n\r\n    if (error) {\r\n      console.error('Error updating product:', error);\r\n      return;\r\n    }\r\n\r\n    editProductModal.style.display = 'none';\r\n    await fetchProducts();\r\n  });\r\n\r\n  await checkAuth();\r\n  await fetchCategories();\r\n  await fetchProducts();\r\n});\n\n//# sourceURL=webpack:///./scripts/main.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./scripts/main.js"]();
/******/ 	
/******/ })()
;